{"version":3,"names":[],"mappings":"","sources":["api.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.nvChatBot = f()}})(function(){var define,module,exports;return (function(){function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s}return e})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar _Bubbles = require(\"../node_modules/chat-bubble/component/Bubbles.js\");\n\n// this is a convenience script that builds all necessary HTML,\n// imports all scripts and stylesheets; your container DIV will\n// have a default `id=\"chat\"`;\n// you can specify a different ID with:\n// `container: \"my_chatbox_id\"` option\n(0, _Bubbles.prepHTML)({ relative_path: \"../node_modules/chat-bubble/\" });\n\n/************************************************************************/\n/************************ SAMPLE IMPLEMENTATION *************************/\n/************************************************************************/\n\n// initialize by constructing a named function...\n/************************************************************************/\n/******* CONVENIENCE METHODS AVAILABLE FOR ES6 BUILD ENVIRONMENTS *******/\n/************************************************************************/\n\n// the URL of where you've installed the component; you may need to change this:\nvar chatWindow = new _Bubbles.Bubbles(document.getElementById(\"chat\"), \"chatWindow\", {\n  // the one that we care about is inputCallbackFn()\n  // this function returns an object with some data that we can process from user input\n  // and understand the context of it\n  // this is an example function that matches the text user typed to one of the answer bubbles\n  // this function does no natural language processing\n  // this is where you may want to connect this script to NLC backend.\n  inputCallbackFn: function inputCallbackFn(o) {\n    // add error conversation block & recall it if no answer matched\n    var miss = function miss() {\n      chatWindow.talk({\n        \"i-dont-get-it\": {\n          says: [\"Sorry, I don't get it 😕. Pls repeat? Or you can just click below 👇\"],\n          reply: o.convo[o.standingAnswer].reply\n        }\n      }, \"i-dont-get-it\");\n    };\n    // do this if answer found\n    var match = function match(key) {\n      setTimeout(function () {\n        chatWindow.talk(convo, key); // restart current convo from point found in the answer\n      }, 600);\n    };\n    // sanitize text for search function\n    var strip = function strip(text) {\n      return text.toLowerCase().replace(/[\\s.,\\/#!$%\\^&\\*;:{}=\\-_'\"`~()]/g, \"\");\n    };\n    // search function\n    var found = false;\n    o.convo[o.standingAnswer].reply.forEach(function (e, i) {\n      strip(e.question).includes(strip(o.input)) && o.input.length > 0 ? found = e.answer : found ? null : found = false;\n    });\n    found ? match(found) : miss();\n  }\n});\n\n// `.talk()` will get your bot to begin the conversation\nchatWindow.talk(\n// pass your JSON/JavaScript object to `.talk()` function where\n// you define how the conversation between the bot and user will go\n{\n  // \"ice\" (as in \"breaking the ice\") is a required conversation object\n  // that maps the first thing the bot will say to the user\n  \"ice\": {\n\n    // \"says\" defines an array of sequential bubbles\n    // that the bot will produce\n    \"says\": [\"Hey!\", \"Can I have a banana?\"],\n\n    // \"reply\" is an array of possible options the user can pick from\n    // as a reply\n    \"reply\": [{\n      \"question\": \"🍌\", // label for the reply option\n      \"answer\": \"banana\" // key for the next conversation object\n    }]\n  }, // end required \"ice\" conversation object\n\n  // another conversation object that can be queued from within\n  // any other conversation object, including itself\n  \"banana\": {\n    \"says\": [\"Thank you!\", \"Can I have another banana?\"],\n    \"reply\": [{\n      \"question\": \"🍌🍌\",\n      \"answer\": \"banana\"\n    }] // end conversation object\n  } // end conversation object\n});\n},{\"../node_modules/chat-bubble/component/Bubbles.js\":2}],2:[function(require,module,exports){\n// core function\nfunction Bubbles(container, self, options) {\n  // options\n  options = typeof options !== \"undefined\" ? options : {}\n  animationTime = options.animationTime || 200 // how long it takes to animate chat bubble, also set in CSS\n  typeSpeed = options.typeSpeed || 5 // delay per character, to simulate the machine \"typing\"\n  widerBy = options.widerBy || 2 // add a little extra width to bubbles to make sure they don't break\n  sidePadding = options.sidePadding || 6 // padding on both sides of chat bubbles\n  inputCallbackFn = options.inputCallbackFn || false // should we display an input field?\n\n  var standingAnswer = \"ice\" // remember where to restart convo if interrupted\n\n  var _convo = {} // local memory for conversation JSON object\n  //--> NOTE that this object is only assigned once, per session and does not change for this\n  // \t\tconstructor name during open session.\n\n  // set up the stage\n  container.classList.add(\"bubble-container\")\n  var bubbleWrap = document.createElement(\"div\")\n  bubbleWrap.className = \"bubble-wrap\"\n  container.appendChild(bubbleWrap)\n\n  // install user input textfield\n  this.typeInput = function(callbackFn) {\n    var inputWrap = document.createElement(\"div\")\n    inputWrap.className = \"input-wrap\"\n    var inputText = document.createElement(\"textarea\")\n    inputText.setAttribute(\"placeholder\", \"Ask me anything...\")\n    inputWrap.appendChild(inputText)\n    inputText.addEventListener(\"keypress\", function(e) {\n      // register user input\n      if (e.keyCode == 13) {\n        e.preventDefault()\n        typeof bubbleQueue !== false ? clearTimeout(bubbleQueue) : false // allow user to interrupt the bot\n        var lastBubble = document.querySelectorAll(\".bubble.say\")\n        lastBubble = lastBubble[lastBubble.length - 1]\n        lastBubble.classList.contains(\"reply\") &&\n        !lastBubble.classList.contains(\"reply-freeform\")\n          ? lastBubble.classList.add(\"bubble-hidden\")\n          : false\n        addBubble(\n          '<span class=\"bubble-button bubble-pick\">' + this.value + \"</span>\",\n          function() {},\n          \"reply reply-freeform\"\n        )\n        // callback\n        typeof callbackFn === \"function\"\n          ? callbackFn({\n              input: this.value,\n              convo: _convo,\n              standingAnswer: standingAnswer\n            })\n          : false\n        this.value = \"\"\n      }\n    })\n    container.appendChild(inputWrap)\n    bubbleWrap.style.paddingBottom = \"100px\"\n    inputText.focus()\n  }\n  inputCallbackFn ? this.typeInput(inputCallbackFn) : false\n\n  // init typing bubble\n  var bubbleTyping = document.createElement(\"div\")\n  bubbleTyping.className = \"bubble-typing imagine\"\n  for (dots = 0; dots < 3; dots++) {\n    var dot = document.createElement(\"div\")\n    dot.className = \"dot_\" + dots + \" dot\"\n    bubbleTyping.appendChild(dot)\n  }\n  bubbleWrap.appendChild(bubbleTyping)\n\n  // accept JSON & create bubbles\n  this.talk = function(convo, here) {\n    // all further .talk() calls will append the conversation with additional blocks defined in convo parameter\n    _convo = Object.assign(_convo, convo) // POLYFILL REQUIRED FOR OLDER BROWSERS\n\n    this.reply(_convo[here])\n    here ? (standingAnswer = here) : false\n  }\n  this.reply = function(turn) {\n    turn = typeof turn !== \"undefined\" ? turn : _convo.ice\n    questionsHTML = \"\"\n    if (turn.reply !== undefined) {\n      turn.reply.reverse()\n      for (var i = 0; i < turn.reply.length; i++) {\n        ;(function(el, count) {\n          questionsHTML +=\n            '<span class=\"bubble-button\" style=\"animation-delay: ' +\n            animationTime / 2 * count +\n            'ms\" onClick=\"' +\n            self +\n            \".answer('\" +\n            el.answer +\n            \"');this.classList.add('bubble-pick')\\\">\" +\n            el.question +\n            \"</span>\"\n        })(turn.reply[i], i)\n      }\n    }\n    orderBubbles(turn.says, function() {\n      bubbleTyping.classList.remove(\"imagine\")\n      questionsHTML !== \"\"\n        ? addBubble(questionsHTML, function() {}, \"reply\")\n        : bubbleTyping.classList.add(\"imagine\")\n    })\n  }\n  // navigate \"answers\"\n  this.answer = function(key) {\n    var func = function(key) {\n      typeof window[key] === \"function\" ? window[key]() : false\n    }\n    _convo[key] !== undefined\n      ? (this.reply(_convo[key]), (standingAnswer = key))\n      : func(key)\n  }\n\n  // api for typing bubble\n  this.think = function() {\n    bubbleTyping.classList.remove(\"imagine\")\n    this.stop = function() {\n      bubbleTyping.classList.add(\"imagine\")\n    }\n  }\n\n  // \"type\" each message within the group\n  var orderBubbles = function(q, callback) {\n    var start = function() {\n      setTimeout(function() {\n        callback()\n      }, animationTime)\n    }\n    var position = 0\n    for (\n      var nextCallback = position + q.length - 1;\n      nextCallback >= position;\n      nextCallback--\n    ) {\n      ;(function(callback, index) {\n        start = function() {\n          addBubble(q[index], callback)\n        }\n      })(start, nextCallback)\n    }\n    start()\n  }\n\n  // create a bubble\n  var bubbleQueue = false\n  var addBubble = function(say, posted, reply) {\n    reply = typeof reply !== \"undefined\" ? reply : \"\"\n    // create bubble element\n    var bubble = document.createElement(\"div\")\n    var bubbleContent = document.createElement(\"span\")\n    bubble.className = \"bubble imagine \" + reply\n    bubbleContent.className = \"bubble-content\"\n    bubbleContent.innerHTML = say\n    bubble.appendChild(bubbleContent)\n    bubbleWrap.insertBefore(bubble, bubbleTyping)\n    // answer picker styles\n    if (reply !== \"\") {\n      var bubbleButtons = bubbleContent.querySelectorAll(\".bubble-button\")\n\n      for (var z = 0; z < bubbleButtons.length; z++) {\n        ;(function(el) {\n          if (!el.parentNode.parentNode.classList.contains(\"reply-freeform\"))\n            el.style.width = el.offsetWidth - sidePadding * 2 + widerBy + \"px\"\n        })(bubbleButtons[z])\n      }\n      bubble.addEventListener(\"click\", function() {\n        for (var i = 0; i < bubbleButtons.length; i++) {\n          ;(function(el) {\n            el.style.width = 0 + \"px\"\n            el.classList.contains(\"bubble-pick\") ? (el.style.width = \"\") : false\n            el.removeAttribute(\"onclick\")\n          })(bubbleButtons[i])\n        }\n        this.classList.add(\"bubble-picked\")\n      })\n    }\n    // time, size & animate\n    wait = animationTime * 2\n    minTypingWait = animationTime * 6\n    if (say.length * typeSpeed > animationTime && reply == \"\") {\n      wait += typeSpeed * say.length\n      wait < minTypingWait ? (wait = minTypingWait) : false\n      setTimeout(function() {\n        bubbleTyping.classList.remove(\"imagine\")\n      }, animationTime)\n    }\n    setTimeout(function() {\n      bubbleTyping.classList.add(\"imagine\")\n    }, wait - animationTime * 2)\n    bubbleQueue = setTimeout(function() {\n      bubble.classList.remove(\"imagine\")\n      var bubbleWidthCalc = bubbleContent.offsetWidth + widerBy + \"px\"\n      bubble.style.width = reply == \"\" ? bubbleWidthCalc : \"\"\n      bubble.style.width = say.includes(\"<img src=\")\n        ? \"50%\"\n        : bubble.style.width\n      bubble.classList.add(\"say\")\n      posted()\n      // animate scrolling\n      containerHeight = container.offsetHeight\n      scrollDifference = bubbleWrap.scrollHeight - bubbleWrap.scrollTop\n      scrollHop = scrollDifference / 200\n      var scrollBubbles = function() {\n        for (var i = 1; i <= scrollDifference / scrollHop; i++) {\n          ;(function() {\n            setTimeout(function() {\n              bubbleWrap.scrollHeight - bubbleWrap.scrollTop > containerHeight\n                ? (bubbleWrap.scrollTop = bubbleWrap.scrollTop + scrollHop)\n                : false\n            }, i * 5)\n          })()\n        }\n      }\n      setTimeout(scrollBubbles, animationTime / 2)\n    }, wait + animationTime * 2)\n  }\n}\n\n// below functions are specifically for WebPack-type project that work with import()\n\n// this function automatically adds all HTML and CSS necessary for chat-bubble to function\nfunction prepHTML(options) {\n  // options\n  var options = typeof options !== \"undefined\" ? options : {}\n  var container = options.container || \"chat\" // id of the container HTML element\n\tvar relative_path = options.relative_path || \"./node_modules/chat-bubble/\"\n\n  // make HTML container element\n  window[container] = document.createElement(\"div\")\n  window[container].setAttribute(\"id\", container)\n  document.body.appendChild(window[container])\n\n  // style everything\n  var appendCSS = function(file) {\n    var link = document.createElement(\"link\")\n    link.href = file;\n    link.type = \"text/css\"\n    link.rel = \"stylesheet\"\n    link.media = \"screen,print\"\n    document.getElementsByTagName(\"head\")[0].appendChild(link)\n  }\n\tappendCSS(relative_path+ \"component/styles/input.css\");\n\tappendCSS(relative_path + \"component/styles/reply.css\")\n\tappendCSS(relative_path + \"component/styles/says.css\")\n\tappendCSS(relative_path + \"component/styles/setup.css\")\n\tappendCSS(relative_path + \"component/styles/typing.css\")\n\n}\n\n// exports for es6\nexports.Bubbles = Bubbles\nexports.prepHTML = prepHTML\n\n},{}]},{},[1])(1)\n});"],"file":"api.js"}